#!/usr/bin/env python
__doc__ = """
(c) 2018 - 2021 data-transport
steve@the-phi.com, The Phi Technology LLC
https://dev.the-phi.com/git/steve/data-transport.git

This program performs ETL between 9 supported data sources  : Couchdb, Mongodb, Mysql, Mariadb, PostgreSQL, Netezza,Redshift, Sqlite, File
LICENSE (MIT)
Copyright 2016-2020, The Phi Technology LLC

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


"""
import pandas as pd
import numpy as np
import json 
import sys
import transport
import time
from multiprocessing import Process

import os
import transport
from transport import etl
# from transport import providers
import typer
from typing_extensions import Annotated
from typing import Optional
import time
from termcolor import colored

app = typer.Typer()
REGISTRY_PATH=os.sep.join([os.environ['HOME'],'.data-transport'])
REGISTRY_FILE= 'transport-registry.json'
CHECK_MARK = ' '.join(['[',colored(u'\u2713', 'green'),']'])
TIMES_MARK= ' '.join(['[',colored(u'\u2717','red'),']'])
# @app.command()
def help() :     
	print (__doc__)
def wait(jobs):
    while jobs :
        jobs = [thread for thread in jobs if thread.is_alive()]
        time.sleep(1)

@app.command(name="apply")
def apply (path:Annotated[str,typer.Argument(help="path of the configuration file")],
        index:int = typer.Option(default= None, help="index of the item of interest, otherwise everything in the file will be processed")):
    """
    This function applies data transport ETL feature to read data from one source to write it one or several others
    """
    # _proxy = lambda _object: _object.write(_object.read())
    if os.path.exists(path):
        file = open(path)
        _config = json.loads (file.read() )
        file.close()
        if index :
            _config = [_config[ int(index)]]
        jobs = []            
        for _args in _config :
            pthread = etl.instance(**_args) #-- automatically starts the process
            jobs.append(pthread)
        #
        # @TODO: Log the number of processes started and estimated time
        while jobs :
             jobs = [pthread for pthread in jobs if pthread.is_alive()]
             time.sleep(1)
        #
        # @TODO: Log the job termination here ...
@app.command(name="providers")
def supported (format:Annotated[str,typer.Argument(help="format of the output, supported formats are (list,table,json)")]="table") :
    """
    This function will print supported providers/vendors and their associated classifications
    """
    _df =  (transport.supported())
    if format in ['list','json'] :
        print (json.dumps(_df.to_dict(orient="list")))
    else:
         print (_df)
    print ()

@app.command()
def version():
    """
    This function will display version and license information
    """

    print (transport.__app_name__,'version ',transport.__version__)
    print (transport.__license__)

@app.command()
def generate (path:Annotated[str,typer.Argument(help="path of the ETL configuration file template (name included)")]):
    """
    This function will generate a configuration template to give a sense of how to create one
    """
    _config = [
            {
                "source":{"provider":"http","url":"https://raw.githubusercontent.com/codeforamerica/ohana-api/master/data/sample-csv/addresses.csv"},
                "target":
            [{"provider":"files","path":"addresses.csv","delimiter":","},{"provider":"sqlite","database":"sample.db3","table":"addresses"}]
            }
            ]
    file = open(path,'w')
    file.write(json.dumps(_config))
    file.close()
    print (f"""{CHECK_MARK} Successfully generated a template ETL file at {path}""" )
    print ("""NOTE: Each line (source or target) is the content of an auth-file""")



@app.command(name="init")
def initregistry (email:Annotated[str,typer.Argument(help="email")],
                  path:str=typer.Option(default=REGISTRY_PATH,help="path or location of the configuration file"), 
                  override:bool=typer.Option(default=False,help="override existing configuration or not")):
    """
    This functiion will initialize the registry and have both application and calling code loading the database parameters by a label

    """
    try:
        transport.registry.init(email=email, path=path, override=override)
        _msg = f"""{CHECK_MARK} Successfully wrote configuration to {path} from {email}"""
    except Exception as e:
        _msg = f"{TIMES_MARK} {e}"
    print (_msg)
    print ()
@app.command(name="register")
def register (label:Annotated[str,typer.Argument(help="unique label that will be used to load the parameters of the database")],
              auth_file:Annotated[str,typer.Argument(help="path of the auth_file")],
              default:bool=typer.Option(default=False,help="set the auth_file as default"),
              path:str=typer.Option(default=REGISTRY_PATH,help="path of the data-transport registry file")):
    """
    This function will register an auth-file i.e database connection and assign it a label, 
    Learn more about auth-file at https://healthcareio.the-phi.com/data-transport
    """
    try:
        if transport.registry.exists(path) :
            transport.registry.set(label=label,auth_file=auth_file, default=default, path=path)
            _msg = f"""{CHECK_MARK} Successfully added label "{label}" to data-transport registry"""
        else:
            _msg = f"""{TIMES_MARK} Registry is not initialized, please initialize the registry (check help)"""
    except Exception as e:
        _msg = f"""{TIMES_MARK} {e}"""
    print (_msg)
    
    pass
if __name__ == '__main__' :
     app()
	
	
